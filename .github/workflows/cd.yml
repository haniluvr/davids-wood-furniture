name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options: [production, staging]

jobs:
  deploy:
    # Only run if CI succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Download frontend build artifacts (if available)
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: public/build/
      continue-on-error: true

    - name: Verify frontend build
      run: |
        if [ -d "public/build" ] && [ "$(ls -A public/build 2>/dev/null)" ]; then
          echo "‚úÖ Using CI artifacts"
        else
          echo "‚ö†Ô∏è CI artifacts not available, will build fresh assets"
          # Ensure build directory exists
          mkdir -p public/build
        fi

    - name: Prepare SSH key
      shell: bash
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem
        sed -i 's/\r$//' key.pem
        # More lenient key validation
        if ! head -1 key.pem | grep -q "BEGIN"; then
          echo "Warning: Key format may be invalid, but continuing..."
        fi
        mkdir -p ~/.ssh
        # Add host to known_hosts with error handling
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || echo "Warning: Could not add host to known_hosts"

    - name: Deploy to EC2
      run: |
        # Create .env file from secrets
        cat > .env << 'EOF'
        APP_NAME="David's Wood Furniture"
        APP_ENV=production
        APP_DEBUG=false
        APP_KEY=${{ secrets.APP_KEY }}
        APP_URL=${{ secrets.APP_URL }}

        DB_CONNECTION=mysql
        DB_HOST=127.0.0.1
        DB_PORT=3306
        DB_DATABASE=davids_wood
        DB_USERNAME=davidswood_user
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}

        REDIS_HOST=127.0.0.1
        REDIS_PORT=6379
        REDIS_PASSWORD=

        MAIL_MAILER=smtp
        MAIL_HOST=${{ secrets.MAIL_HOST }}
        MAIL_PORT=${{ secrets.MAIL_PORT }}
        MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
        MAIL_ENCRYPTION=tls
        MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
        MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}

        LOG_CHANNEL=stack
        LOG_DEPRECATIONS_CHANNEL=null
        LOG_LEVEL=error
        BROADCAST_DRIVER=log
        CACHE_DRIVER=redis
        QUEUE_CONNECTION=redis
        SESSION_DRIVER=redis
        SESSION_LIFETIME=1440
        FILESYSTEM_DISK=s3
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_S3_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION=${{ secrets.AWS_S3_REGION }}
        AWS_BUCKET=${{ secrets.AWS_S3_BUCKET }}

        EOF

        # Test EC2 connection first
        echo "Testing EC2 connection..."
        echo "EC2 Host: ${{ secrets.EC2_HOST }}"
        echo "EC2 User: ${{ secrets.EC2_USER }}"
        echo "Testing connectivity..."
        
        # Test basic connectivity first
        ping -c 3 ${{ secrets.EC2_HOST }} || echo "Ping failed, but continuing..."
        
        # Test SSH connection
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          -o ConnectTimeout=30 -o ServerAliveInterval=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'EC2 connection successful'"
        
        # Create target directory on EC2
        echo "Creating target directory on EC2..."
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          -o ConnectTimeout=30 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /tmp/davids-wood-furniture-deploy"
        
        # Copy files to EC2
        echo "Copying files to EC2..."
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          -o ConnectTimeout=30 -r . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/davids-wood-furniture-deploy/

        # Execute deployment on EC2
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'DEPLOY_EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting deployment on EC2..."
        
        APP_DIR="/var/www/html/davids-wood-furniture"
        DEPLOY_DIR="/tmp/davids-wood-furniture-deploy"
        
        # Create backup
        echo "Creating backup..."
        if [ -d "$APP_DIR" ]; then
          sudo cp -r "$APP_DIR" "${APP_DIR}_backup_$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Stop Apache temporarily
        echo "Stopping Apache..."
        sudo systemctl stop apache2
        
        # Update application files
        echo "Updating application files..."
        sudo rm -rf "$APP_DIR"
        sudo mv "$DEPLOY_DIR" "$APP_DIR"
        
        # Set proper ownership
        echo "Setting file permissions..."
        sudo chown -R www-data:www-data "$APP_DIR"
        sudo chmod -R 755 "$APP_DIR"
        sudo chmod -R 775 "$APP_DIR/storage"
        sudo chmod -R 775 "$APP_DIR/bootstrap/cache"
        
        # Install PHP dependencies
        echo "Installing PHP dependencies..."
        cd "$APP_DIR"
        composer install --no-dev --optimize-autoloader --no-interaction
        
        # Install Node dependencies and build assets
        echo "Installing Node dependencies..."
        npm ci
        
        echo "Building frontend assets..."
        npm run build
        
        # Run Laravel commands
        echo "Running Laravel commands..."
        php artisan migrate --force
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        php artisan queue:restart
        
        # Start Apache
        echo "Starting Apache..."
        sudo systemctl start apache2
        
        # Test deployment
        echo "Testing deployment..."
        sleep 5
        if curl -f "http://localhost/health" >/dev/null 2>&1; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          sudo systemctl status apache2
          sudo tail -20 /var/log/apache2/error.log
          exit 1
        fi
        
        # Cleanup
        echo "Cleaning up..."
        sudo rm -rf /tmp/davids-wood-furniture-deploy
        
        echo "üéâ Deployment completed successfully!"
        DEPLOY_EOF

    - name: Post-deployment health check
      run: |
        sleep 10
        if curl -f "http://${{ secrets.EC2_HOST }}/health" >/dev/null 2>&1; then
          echo "‚úÖ External health check passed"
        else
          echo "‚ùå External health check failed"
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo systemctl status apache2 && sudo tail -20 /var/log/apache2/error.log"
          exit 1
        fi