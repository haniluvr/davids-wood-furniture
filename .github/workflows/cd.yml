name: CD Pipeline

# This workflow runs after the CI Pipeline completes successfully
# It will only deploy if all tests pass and code quality checks succeed

# Required GitHub Secrets:
# - EC2_HOST: EC2 instance public IP
# - EC2_USER: EC2 username (usually 'ubuntu')
# - EC2_SSH_KEY: Private SSH key for EC2 access
# - DB_PASSWORD: Database password for davidswood_user
# - MYSQL_ROOT_PASSWORD: MySQL root password
# - MAIL_HOST: SMTP server hostname
# - MAIL_PORT: SMTP server port (usually 465 for SSL)
# - MAIL_USERNAME: SMTP username
# - MAIL_PASSWORD: SMTP password
# - MAIL_FROM_ADDRESS: From email address
# - GOOGLE_CLIENT_ID: Google OAuth Client ID (optional)
# - GOOGLE_CLIENT_SECRET: Google OAuth Client Secret (optional)

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # Only run if CI pipeline was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Check CI Pipeline Status
      run: |
        echo "✅ CI Pipeline completed successfully"
        echo "🚀 Starting deployment process..."
    
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm run build

    - name: Prepare SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Test EC2 connection
      run: |
        echo "Testing EC2 connection..."
        echo "EC2 Host: ${{ secrets.EC2_HOST }}"
        echo "EC2 User: ${{ secrets.EC2_USER }}"
        
        # Test SSH connection
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          -o ConnectTimeout=15 -o ServerAliveInterval=5 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'EC2 connection successful'"

    # Prepare directory and set permissions
    - name: Prepare deployment directory
      run: |
        echo "🚀 Preparing deployment directory on EC2..."
        
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'PREPARE_EOF'
        #!/bin/bash
        set -e
        
        APP_DIR="/var/www/html/davids-wood-furniture"
        
        # Create directory if it doesn't exist
        echo "Creating application directory..."
        sudo mkdir -p "$APP_DIR"
        
        # Set proper ownership and permissions BEFORE rsync
        echo "Setting directory permissions..."
        sudo chown -R ubuntu:ubuntu "$APP_DIR"
        sudo chmod -R 775 "$APP_DIR"
        
        echo "✅ Directory prepared with correct permissions"
        PREPARE_EOF

    # Deploy files using rsync
    - name: Deploy with rsync
      run: |
        echo "🚀 Deploying files to EC2..."
        
        # Deploy files using rsync with exclusions
        rsync -avz --delete --progress \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='vendor' \
          --exclude='.env' \
          --exclude='.env.local' \
          --exclude='.env.example' \
          --exclude='storage/logs/*.log' \
          --exclude='storage/framework/cache/*' \
          --exclude='storage/framework/sessions/*' \
          --exclude='storage/framework/views/*' \
          --exclude='database/*.sqlite' \
          --exclude='database/*.sql' \
          --exclude='public/build' \
          --exclude='*.log' \
          --exclude='npm-debug.log' \
          --exclude='yarn-debug.log' \
          --exclude='.DS_Store' \
          --exclude='README.md' \
          -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem -o ConnectTimeout=15" \
          ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/html/davids-wood-furniture/
        
        echo "✅ Files deployed successfully"

    # Set proper permissions after rsync deployment
    - name: Set file permissions
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'PERMISSIONS_EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Setting file permissions on EC2..."
        
        APP_DIR="/var/www/html/davids-wood-furniture"
        
        # Set proper ownership and permissions for web server
        echo "Setting file permissions for web server..."
        sudo chown -R www-data:www-data "$APP_DIR"
        sudo chmod -R 755 "$APP_DIR"
        sudo chmod -R 775 "$APP_DIR/storage"
        sudo chmod -R 775 "$APP_DIR/bootstrap/cache"
        
        # Create missing Laravel storage directories
        echo "Creating missing Laravel storage directories..."
        sudo mkdir -p "$APP_DIR/storage/logs" || echo "Storage logs directory creation failed"
        sudo mkdir -p "$APP_DIR/storage/framework/cache" || echo "Storage cache directory creation failed"
        sudo mkdir -p "$APP_DIR/storage/framework/sessions" || echo "Storage sessions directory creation failed"
        sudo mkdir -p "$APP_DIR/storage/framework/views" || echo "Storage views directory creation failed"
        sudo mkdir -p "$APP_DIR/storage/app" || echo "Storage app directory creation failed"
        sudo mkdir -p "$APP_DIR/bootstrap/cache" || echo "Bootstrap cache directory creation failed"
        
        # Set permissions for storage directories
        sudo chown -R www-data:www-data "$APP_DIR/storage" || echo "Storage ownership fix failed"
        sudo chown -R www-data:www-data "$APP_DIR/bootstrap/cache" || echo "Bootstrap cache ownership fix failed"
        sudo chmod -R 775 "$APP_DIR/storage" || echo "Storage permissions fix failed"
        sudo chmod -R 775 "$APP_DIR/bootstrap/cache" || echo "Bootstrap cache permissions fix failed"
        
        echo "✅ File permissions set successfully"
        PERMISSIONS_EOF

    # Install dependencies and run Laravel setup
    - name: Install dependencies and setup Laravel
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'SETUP_EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Installing dependencies and setting up Laravel..."
        
        APP_DIR="/var/www/html/davids-wood-furniture"
        cd "$APP_DIR"
        
        # Install PHP dependencies
        echo "Installing PHP dependencies..."
        sudo -u www-data composer install --no-dev --optimize-autoloader --no-interaction
        
        # Fix npm permissions and create clean environment
        echo "Setting up npm environment..."
        sudo rm -rf /var/www/.npm /var/www/.npmrc /tmp/.npm
        sudo mkdir -p /tmp/.npm
        sudo chown -R www-data:www-data /tmp/.npm
        
        # Set npm environment variables for www-data
        echo "Configuring npm environment..."
        sudo -u www-data bash -c 'export NPM_CONFIG_CACHE=/tmp/.npm && export NPM_CONFIG_PREFIX=/tmp/.npm-global && npm ci'
        
        echo "Building frontend assets..."
        sudo -u www-data bash -c 'export NPM_CONFIG_CACHE=/tmp/.npm && export NPM_CONFIG_PREFIX=/tmp/.npm-global && npm run build'
        
        # Ensure MySQL is running
        echo "Checking MySQL status..."
        sudo systemctl status mysql || echo "MySQL status check failed"
        sudo systemctl start mysql || echo "MySQL start failed"
        
        # Create MySQL user for 127.0.0.1 (required for GitHub Actions environment)
        echo "Creating MySQL user for 127.0.0.1 as root..."
        mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "CREATE USER IF NOT EXISTS 'davidswood_user'@'127.0.0.1' IDENTIFIED WITH mysql_native_password BY 'StrongPass123!';" || echo "User creation failed, but continuing..."
        mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "GRANT ALL PRIVILEGES ON davids_wood.* TO 'davidswood_user'@'127.0.0.1';" || echo "Grant privileges failed, but continuing..."
        mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "FLUSH PRIVILEGES;" || echo "Flush privileges failed, but continuing..."
        
        # Also ensure the database exists
        echo "Creating database if it doesn't exist..."
        mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS davids_wood;" || echo "Database creation failed, but continuing..."
        
        # Create .env file with production values
        echo "Creating .env file with production values..."
        sudo tee "$APP_DIR/.env" > /dev/null << 'ENV_EOF'
        APP_NAME="David's Wood Furniture"
        APP_ENV=production
        APP_KEY=
        APP_DEBUG=false
        APP_URL=https://davidswood.shop

        LOG_CHANNEL=stack
        LOG_DEPRECATIONS_CHANNEL=null
        LOG_LEVEL=debug

        DB_CONNECTION=mysql
        DB_HOST=localhost
        DB_PORT=3306
        DB_DATABASE=davids_wood
        DB_USERNAME=davidswood_user
        DB_PASSWORD=StrongPass123!

        BROADCAST_DRIVER=log
        CACHE_DRIVER=file
        FILESYSTEM_DISK=local
        QUEUE_CONNECTION=sync
        SESSION_DRIVER=file
        SESSION_LIFETIME=120

        MEMCACHED_HOST=127.0.0.1

        REDIS_HOST=127.0.0.1
        REDIS_PASSWORD=null
        REDIS_PORT=6379

        MAIL_MAILER=smtp
        MAIL_HOST=${{ secrets.MAIL_HOST }}
        MAIL_PORT=${{ secrets.MAIL_PORT }}
        MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
        MAIL_ENCRYPTION=ssl
        MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
        MAIL_FROM_NAME="${APP_NAME}"

        # Map repository secrets named AWS_S3_* to Laravel's expected AWS_* envs
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION=ap-southeast-2
        AWS_BUCKET=${{ secrets.AWS_S3_BUCKET }}
        AWS_S3_ACCESS_KEY_ID=${{ secrets.AWS_S3_ACCESS_KEY_ID }}
        AWS_S3_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
        AWS_S3_REGION=${{ secrets.AWS_S3_REGION }}
        AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
        AWS_USE_PATH_STYLE_ENDPOINT=false

        PUSHER_APP_ID=
        PUSHER_APP_KEY=
        PUSHER_APP_SECRET=
        PUSHER_HOST=
        PUSHER_PORT=443
        PUSHER_SCHEME=https
        PUSHER_APP_CLUSTER=mt1

        VITE_APP_NAME="${APP_NAME}"
        VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
        VITE_PUSHER_HOST="${PUSHER_HOST}"
        VITE_PUSHER_PORT="${PUSHER_PORT}"
        VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
        VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

        # Google OAuth Configuration
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_REDIRECT_URL=https://davidswood.shop/auth/google/callback
        ENV_EOF
        
        # Set proper ownership for .env (readable by both www-data and ubuntu users)
        sudo chown www-data:www-data "$APP_DIR/.env"
        sudo chmod 640 "$APP_DIR/.env"
        
        # Add ubuntu user to www-data group for .env access
        sudo usermod -a -G www-data ubuntu || echo "Failed to add ubuntu to www-data group"
        
        # Generate Laravel application key
        echo "Generating Laravel application key..."
        sudo -u www-data php artisan key:generate --force || echo "Key generation failed, but continuing..."
        
        # Clear Laravel caches
        echo "Clearing Laravel caches..."
        sudo -u www-data php artisan config:clear || echo "Config clear failed"
        sudo -u www-data php artisan route:clear || echo "Route clear failed"
        sudo -u www-data php artisan view:clear || echo "View clear failed"
        sudo -u www-data php artisan cache:clear || echo "Cache clear failed"
        
        # Cache configuration for production
        echo "Caching Laravel configuration..."
        sudo -u www-data php artisan config:cache || echo "Config cache failed"
        sudo -u www-data php artisan route:cache || echo "Route cache failed"
        sudo -u www-data php artisan view:cache || echo "View cache failed"
        
                # Run database migrations
        echo "Running database migrations..."
        # Disable foreign key checks for migration
        mysql -u davidswood_user -p${{ secrets.DB_PASSWORD }} -e "SET FOREIGN_KEY_CHECKS=0;" davids_wood || echo "FK disable failed"
        sudo -u www-data php artisan migrate --force
        if [ $? -ne 0 ]; then
          echo "❌ Migration failed - stopping deployment"
          exit 1
        fi
        # Re-enable foreign key checks
        mysql -u davidswood_user -p${{ secrets.DB_PASSWORD }} -e "SET FOREIGN_KEY_CHECKS=1;" davids_wood || echo "FK enable failed"
        
        # Restart services
        echo "Restarting services..."
        sudo systemctl restart apache2 || echo "Apache restart failed"
        
        # Check and restart PHP-FPM service (try different service names)
        echo "Checking PHP-FPM service..."
        if systemctl list-units --type=service | grep -q "php.*fpm"; then
          echo "Found PHP-FPM service, restarting..."
          sudo systemctl restart php*-fpm || echo "PHP-FPM restart failed"
        else
          echo "No PHP-FPM service found, checking for alternative..."
          sudo systemctl restart php8.1-fpm || sudo systemctl restart php8.2-fpm || sudo systemctl restart php8.3-fpm || echo "PHP-FPM restart failed"
        fi
        
        sudo systemctl restart mysql || echo "MySQL restart failed"
        
        echo "✅ Laravel setup completed successfully"
        SETUP_EOF

    # Configure Apache
    - name: Configure Apache
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'APACHE_EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Configuring Apache..."
        
        # Enable required Apache modules
        echo "Enabling Apache modules..."
        sudo a2enmod rewrite || echo "Rewrite module enable failed"
        sudo a2enmod ssl || echo "SSL module enable failed"
        
        # Update default site document root
        echo "Updating Apache document root..."
        echo "Current Apache config before update:"
        sudo cat /etc/apache2/sites-available/000-default.conf | grep DocumentRoot || echo "No DocumentRoot found"
        
        sudo sed -i 's|DocumentRoot /var/www/html|DocumentRoot /var/www/html/davids-wood-furniture/public|' /etc/apache2/sites-available/000-default.conf || echo "Document root update failed"
        
        echo "Apache config after update:"
        sudo cat /etc/apache2/sites-available/000-default.conf | grep DocumentRoot || echo "No DocumentRoot found"
        
        # Add Laravel-specific Apache configuration
        echo "Adding Laravel Apache configuration..."
        sudo tee -a /etc/apache2/sites-available/000-default.conf > /dev/null << 'APACHE_CONFIG'
        
        # Laravel configuration
        <Directory /var/www/html/davids-wood-furniture/public>
            AllowOverride All
            Require all granted
        </Directory>
        APACHE_CONFIG
        
        # Test Apache configuration
        echo "Testing Apache configuration..."
        sudo apache2ctl configtest || echo "Apache config test failed"
        
        # Show final Apache configuration
        echo "Final Apache configuration:"
        sudo cat /etc/apache2/sites-available/000-default.conf || echo "Could not read Apache config"
        
        # Verify Laravel public directory exists and has index.php
        echo "Checking Laravel public directory:"
        ls -la /var/www/html/davids-wood-furniture/public/ || echo "Public directory not found"
        ls -la /var/www/html/davids-wood-furniture/public/index.php || echo "index.php not found"
        
        # Restart Apache
        echo "Restarting Apache..."
        sudo systemctl restart apache2 || echo "Apache restart failed"
        
        echo "✅ Apache configuration completed"
        APACHE_EOF

    # Post-deployment health check
    - name: Post-deployment health check
      timeout-minutes: 3
      run: |
        echo "🔍 Running post-deployment health checks..."
        
        # Debug Laravel application
        echo "🔧 Debugging Laravel application..."
        timeout 120 ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i key.pem \
          -o ConnectTimeout=10 -o ServerAliveInterval=5 -o ServerAliveCountMax=3 \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'DEBUG_EOF'
        #!/bin/bash
        set -e
        
        APP_DIR="/var/www/html/davids-wood-furniture"
        cd "$APP_DIR"
        
        # Check if .env file exists and has content
        echo "=== Checking .env file ==="
        if [ -f "$APP_DIR/.env" ]; then
          echo "✅ .env file exists"
          echo "File size: $(wc -l < "$APP_DIR/.env") lines"
          echo "First few lines:"
          head -5 "$APP_DIR/.env" || echo "Could not read .env file"
        else
          echo "❌ .env file missing"
        fi
        
        # Check Laravel logs (simplified)
        echo "=== Checking Laravel logs ==="
        if [ -f "$APP_DIR/storage/logs/laravel.log" ]; then
          echo "✅ Laravel log exists"
        else
          echo "❌ Laravel log missing"
        fi
        
        # Test database connection (simplified)
        echo "=== Testing database connection ==="
        sudo -u www-data php artisan migrate:status > /dev/null 2>&1 && echo "DB connection test: SUCCESS" || echo "DB connection test: FAILED"
        
        # Check Laravel configuration
        echo "=== Checking Laravel configuration ==="
        sudo -u www-data php artisan config:cache || echo "Config cache failed"
        sudo -u www-data php artisan route:cache || echo "Route cache failed"
        
        # Test basic Laravel functionality (simplified to avoid timeout)
        echo "=== Testing Laravel functionality ==="
        sudo -u www-data php artisan --version || echo "Artisan command failed"
        
        # Check for PHP syntax errors (only critical files to avoid timeout)
        echo "=== Checking for PHP syntax errors ==="
        php -l "$APP_DIR/routes/console.php" || echo "Console routes syntax error"
        php -l "$APP_DIR/routes/web.php" || echo "Web routes syntax error"
        php -l "$APP_DIR/routes/api.php" || echo "API routes syntax error"
        php -l "$APP_DIR/config/auth.php" || echo "Auth config syntax error"
        php -l "$APP_DIR/config/app.php" || echo "App config syntax error"
        echo "No syntax errors detected in critical files"
        
        # Check if all required files exist
        echo "=== Checking critical files ==="
        ls -la "$APP_DIR/public/index.php" || echo "❌ index.php missing"
        ls -la "$APP_DIR/vendor/autoload.php" || echo "❌ Composer autoload missing"
        ls -la "$APP_DIR/bootstrap/app.php" || echo "❌ Laravel bootstrap missing"
        
        echo "✅ Debug information collected"
        DEBUG_EOF
        
        # Test website accessibility (with timeout)
        echo "Testing website accessibility..."
        HTTP_CODE=$(timeout 30 curl -f -s -o /dev/null -w "%{http_code}" "http://${{ secrets.EC2_HOST }}" || echo "000")
        echo "HTTP Status Code: $HTTP_CODE"
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo "=== Getting detailed error response ==="
          timeout 15 curl -v "http://${{ secrets.EC2_HOST }}" 2>&1 | head -10 || echo "Could not get detailed response"
        fi
        
        echo "✅ Health checks completed"